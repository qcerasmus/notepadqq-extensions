var MessageError = require("./message_error");
var Stubs = require("./stubs");
var MessageInterpreter = (function () {
    function MessageInterpreter(dataChannel) {
        this._eventHandlers = {};
        this._resultMessagesBuffer = [];
        this._dataChannel = dataChannel;
    }
    MessageInterpreter.prototype.registerEventHandler = function (objectId, event, callback) {
        if (callback !== undefined && callback !== null) {
            var objEvents = this._setObjectDefault(this._eventHandlers, objectId, {});
            var evtHandlers = this._setObjectDefault(objEvents, event, []);
            evtHandlers.push(callback);
        }
    };
    MessageInterpreter.prototype.invokeApi = function (objectId, method, args) {
        var message = {
            'objectId': objectId,
            'method': method,
            'args': args
        };
        this._dataChannel.sendMessage(message);
        // *coff* synchronously wait for the result message
        if (this._resultMessagesBuffer.length == 0) {
            require('deasync').loopWhile(function () {
                return this._resultMessagesBuffer.length == 0;
            }.bind(this));
        }
        var reply = this._resultMessagesBuffer.shift();
        var result = [reply["result"]];
        this._convertStubs(result);
        result = result[0];
        if (reply["err"] !== MessageError.ErrorCode.NONE) {
            throw new MessageError.MessageError(reply["err"], reply["errStr"]);
        }
        return result;
    };
    MessageInterpreter.prototype.processMessage = function (message) {
        if (message["event"] !== undefined) {
            this._processEventMessage(message);
        }
        else if (message["result"] !== undefined) {
            this._resultMessagesBuffer.push(message);
        }
    };
    MessageInterpreter.prototype._processEventMessage = function (message) {
        var event = message["event"];
        var objectId = message["objectId"];
        if (this._eventHandlers.hasOwnProperty(objectId) &&
            this._eventHandlers[objectId].hasOwnProperty(event)) {
            var handlers = this._eventHandlers[objectId][event];
            var args = message["args"];
            this._convertStubs(args);
            for (var i = handlers.length - 1; i >= 0; i--) {
                handlers[i].apply(handlers[i], args);
            }
        }
    };
    MessageInterpreter.prototype._convertStubs = function (dataArray) {
        // FIXME Use a stack
        for (var i = 0; i < dataArray.length; i++) {
            if (dataArray[i] !== null && dataArray[i] !== undefined) {
                if (Array.isArray(dataArray[i])) {
                    this._convertStubs(dataArray[i]);
                }
                else if (typeof dataArray[i]["$__nqq__stub_type"] === 'string'
                    && typeof dataArray[i]["id"] === 'number') {
                    var stubType = dataArray[i]["$__nqq__stub_type"];
                    if (typeof Stubs[stubType] === 'function') {
                        var id = dataArray[i]["id"];
                        dataArray[i] = new Stubs[stubType](this, id);
                    }
                    else {
                        console.error("Unknown stub: " + stubType);
                    }
                }
                else if (typeof dataArray[i] === 'object') {
                    for (var property in dataArray[i]) {
                        if (dataArray[i].hasOwnProperty(property)) {
                            var propValue = [dataArray[i][property]];
                            this._convertStubs(propValue);
                            dataArray[i][property] = propValue[0];
                        }
                    }
                }
            }
        }
    };
    MessageInterpreter.prototype._setObjectDefault = function (object, key, value) {
        if (!object.hasOwnProperty(key)) {
            object[key] = value;
        }
        return object[key];
    };
    return MessageInterpreter;
})();
module.exports = MessageInterpreter;
//# sourceMappingURL=message_interpreter.js.map